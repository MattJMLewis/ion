// Copyright (c) 2016-2018 Clearmatics Technologies Ltd
// SPDX-License-Identifier: LGPL-3.0+

const Web3Utils = require('web3-utils');
const BN = require('bignumber.js')
const merkle = require('./helpers/merkle.js')

const Ion = artifacts.require("Ion");

require('chai')
 .use(require('chai-as-promised'))
 .should();

const DEPLOYEDCHAINID = "0xab830ae0774cb20180c8b463202659184033a9f30a21550b89a2b406c3ac8075"

const TESTCHAINID = "0x22b55e8a4f7c03e1689da845dd463b09299cb3a574e64c68eafc4e99077a7254"
const TESTBLOCK = {
    difficulty: 2,
    extraData: "0xd88301080b846765746888676f312e31302e32856c696e757800000000000000461bc1df80fdafba4508e41ef01a570b7998fa0c64eaae65d62e57929afc232a0656a0a43e10387ffebcc8837d1c0d28ab801313e18775f574e73f119452b42e01",
    gasLimit: 939056936520814100,
    gasUsed: 26920,
    hash: "0xe40cd510f5e415980a2a18ab97b1983c7da43ee56b299cf931c35d9c9ce435f2",
    logsBloom: "0x
    miner: "0x0000000000000000000000000000000000000000",
    mixHash: "0x0000000000000000000000000000000000000000000000000000000000000000",
    nonce: "0x0000000000000000",
    number: 210,
    parentHash: "0xf4d7435eff2fcff295eca2c97a1299eeb1d2ce479b4c6e0e799f4a7bed6e4f72",
    receiptsRoot: "0x5ad439bb61e71db83d139847424ac55990546a1b55cc5dd12a57850fd47af845",
    sha3Uncles: "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
    size: 756,
    stateRoot: "0x19ac400db348a4975008c6e75c537bce261d116bcd74d8b75a9d6992e3b161ed",
    timestamp: 1529069678,
    totalDifficulty: 421,
    transactions: ["0x93f687edff8cf04c60b177b47ddcd8861c795664e5af1da9116b62d06e91694b"],
    transactionsRoot: "0x87c9f55218d8784fa39a773791633e9d007a99bef43c12233ebf980810d47464",
    uncles: []
}
const TESTRLPENCODING = "0xf9025ea0f4d7435eff2fcff295eca2c97a1299eeb1d2ce479b4c6e0e799f4a7bed6e4f72a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a019ac400db348a4975008c6e75c537bce261d116bcd74d8b75a9d6992e3b161eda087c9f55218d8784fa39a773791633e9d007a99bef43c12233ebf980810d47464a05ad439bb61e71db83d139847424ac55990546a1b55cc5dd12a57850fd47af845bd2880d08334ef5308dff826928845b23c06eb861d88301080b846765746888676f312e31302e32856c696e757800000000000000461bc1df80fdafba4508e41ef01a570b7998fa0c64eaae65d62e57929afc232a0656a0a43e10387ffebcc8837d1c0d28ab801313e18775f574e73f119452b42e01a00000000000000000000000000000000000000000000000000000000000000000880000000000000000"

contract('Ion.js', (accounts) => {
    it('Deploy Ion', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);
        let chainId = await ion.chainId();

        assert.equal(chainId, DEPLOYEDCHAINID);
    })

    it('Register Chain', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        // Successfully add id of another chain
        await ion.RegisterChain(TESTCHAINID);
        let chain = await ion.chains.call(0);

        assert.equal(chain, TESTCHAINID);

        // Fail adding id of this chain
        await ion.RegisterChain(DEPLOYEDCHAINID).should.be.rejected;

        // Fail adding id of chain already registered
        await ion.RegisterChain(TESTCHAINID).should.be.rejected;
    })

    it('Submit Block', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        // Submit block should succeed
        await ion.SubmitBlock(TESTCHAINID, TESTBLOCK.hash, TESTRLPENCODING)

        let blockHash = await ion.m_blockhashes(TESTCHAINID, 0);
        let header = await ion.getBlockHeader.call(blockHash);

        // Separate fetched header info
        parentHash = header[0];
        txRootHash = header[1];
        receiptRootHash = header[2];

        // Assert that block was persisted correctly
        assert.equal(blockHash, TESTBLOCK.hash);
        assert.equal(parentHash, TESTBLOCK.parentHash);
        assert.equal(txRootHash, TESTBLOCK.transactionsRoot);
        assert.equal(receiptRootHash, TESTBLOCK.receiptsRoot);
    })

    it('Fail Submit Block from unknown chain', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        await ion.SubmitBlock(TESTCHAINID.slice(0, -2) + "ff", "0xe40cd510f5e415980a2a18ab97b1983c7da43ee56b299cf931c35d9c9ce435f2", "0xf9025ea0f4d7435eff2fcff295eca2c97a1299eeb1d2ce479b4c6e0e799f4a7bed6e4f72a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a019ac400db348a4975008c6e75c537bce261d116bcd74d8b75a9d6992e3b161eda087c9f55218d8784fa39a773791633e9d007a99bef43c12233ebf980810d47464a05ad439bb61e71db83d139847424ac55990546a1b55cc5dd12a57850fd47af845bd2880d08334ef5308dff826928845b23c06eb861d88301080b846765746888676f312e31302e32856c696e757800000000000000461bc1df80fdafba4508e41ef01a570b7998fa0c64eaae65d62e57929afc232a0656a0a43e10387ffebcc8837d1c0d28ab801313e18775f574e73f119452b42e01a00000000000000000000000000000000000000000000000000000000000000000880000000000000000").should.be.rejected;
    })

    it('Fail Submit Block with wrong block hash', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        await ion.SubmitBlock(TESTCHAINID, "0xe4" + "1" + "cd510f5e415980a2a18ab97b1983c7da43ee56b299cf931c35d9c9ce435f2", "0xf9025ea0f4d7435eff2fcff295eca2c97a1299eeb1d2ce479b4c6e0e799f4a7bed6e4f72a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a019ac400db348a4975008c6e75c537bce261d116bcd74d8b75a9d6992e3b161eda087c9f55218d8784fa39a773791633e9d007a99bef43c12233ebf980810d47464a05ad439bb61e71db83d139847424ac55990546a1b55cc5dd12a57850fd47af845bd2880d08334ef5308dff826928845b23c06eb861d88301080b846765746888676f312e31302e32856c696e757800000000000000461bc1df80fdafba4508e41ef01a570b7998fa0c64eaae65d62e57929afc232a0656a0a43e10387ffebcc8837d1c0d28ab801313e18775f574e73f119452b42e01a00000000000000000000000000000000000000000000000000000000000000000880000000000000000").should.be.rejected;
    })

    it('Check Tx Proof', () => {

    })

    it('Fail Tx Proof', () => {

    })

    it('Check Receipt Proof', () => {

    })

    it('Fail Receipt Proof', () => {

    })

    it('Check Roots Proof', () => {

    })

    it('Fail Roots Proof', () => {

    })
})
