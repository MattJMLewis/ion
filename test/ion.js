// Copyright (c) 2016-2018 Clearmatics Technologies Ltd
// SPDX-License-Identifier: LGPL-3.0+

const Web3Utils = require('web3-utils');
const BN = require('bignumber.js')
const merkle = require('./helpers/merkle.js')
const encoder = require('./helpers/encoder.js')
const Trie = require('merkle-patricia-tree');
const rlp = require('rlp');
const async = require('async')
const EthereumTx = require('ethereumjs-tx');
const EthereumBlock = require('ethereumjs-block/from-rpc')
const levelup = require('levelup');
const sha3 = require('js-sha3').keccak_256
const EP = require('eth-proof');

const Web3 = require('web3');

const Ion = artifacts.require("Ion");
const PatriciaTrie = artifacts.require("PatriciaTrie");

require('chai')
 .use(require('chai-as-promised'))
 .should();

const DEPLOYEDCHAINID = "0xab830ae0774cb20180c8b463202659184033a9f30a21550b89a2b406c3ac8075"

const TESTCHAINID = "0x22b55e8a4f7c03e1689da845dd463b09299cb3a574e64c68eafc4e99077a7254"
const TESTBLOCK = {
    difficulty: 12549329517745,
    extraData: "0xd783010303844765746887676f312e352e31856c696e7578",
    gasLimit: 3141592,
    gasUsed: 63000,
    hash: "0x95c3a05973fec7bf98f1131a72e607b4eba171d0576571cf83ee7162bbcdb7d9",
    logsBloom: "0x
    miner: "0x95581ea0c5b362933f3523138f54d51eae817211",
    mixHash: "0xa01f9d00ac510a726f883459834e30cfe085f47b04e22f72207f5a9e9d652ca6",
    nonce: "0x1c080c4ec6f2553b",
    number: 1000002,
    parentHash: "0xcb5cab7266694daa0d28cbf40496c08dd30bf732c41e0455e7ad389c10d79f4f",
    receiptsRoot: "0x97097902b6b4d6b695ef16b923e33b8780d95cf4bd54540ac450deb019d07647",
    sha3Uncles: "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
    size: 883,
    stateRoot: "0x643430d1afc3f02ce5249e4ba5979fb8601b1907a5923a4a74d36d66321a27e5",
    timestamp: 1455404078,
    totalDifficulty: 7135227569124568698,
    transactions: ["0x2bd653c639c086ad1c6e468d2cbdba76fc144f747373be6d2db7854d0d0e36e7", "0x7e3abff232dd5fc72db441807bcd59d9f17311a960a8f6ff6d0e693c22fa1eb2", "0x07a911c87c6e656e2f83c30e0cbdac47789fd874c747337ad1776b7dd5238893"],
    transactionsRoot: "0xdbdf7457111e50e435853974d5412c2151fde6e3c2e3f5aecc253aa4cb21fce2",
    uncles: []
}

const TESTRLPENCODING = "0xf90217a0cb5cab7266694daa0d28cbf40496c08dd30bf732c41e0455e7ad389c10d79f4fa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479495581ea0c5b362933f3523138f54d51eae817211a0643430d1afc3f02ce5249e4ba5979fb8601b1907a5923a4a74d36d66321a27e5a0dbdf7457111e50e435853974d5412c2151fde6e3c2e3f5aecc253aa4cb21fce2a097097902b6b4d6b695ef16b923e33b8780d95cf4bd54540ac450deb019d07647b9010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000860b69de53fcb1830f4242832fefd882f6188456bfb42e98d783010303844765746887676f312e352e31856c696e7578a0a01f9d00ac510a726f883459834e30cfe085f47b04e22f72207f5a9e9d652ca6881c080c4ec6f2553b"
const TEST_PATH = "0x02"

const TEST_TX_VALUE = "0xf8708302a122850ba43b740083015f909453e0551a1e31a40855bc8e086eb8db803a625bbf880e861ef96aefa800801ca03a92b0a4ffd7f8774688325c1306387e15e64225d03a5a43aeceaf2e53ea782da033f501d040a857572b747e7a0968f269107e34dae093f901b380423937862084"
const TEST_TX_NODES = "0xf9011df851a0f2c8598d0469e213e269219f0f631bf9834344426238de6b986cf64e8ab7a76a80808080808080a04a397832771093a06e1fbfde782a2fc1624f214d090825c065d301f0325e0c7b8080808080808080f85180a0a6177c642f5f21f80f5e7ba81558bfb253da9fbe0bcedc768433cbff6f973073a0d56c80e3abbe59dfa6b65f3640f8f0661b485b76c44379d3c478545c59e508a48080808080808080808080808080f87520b872f8708302a122850ba43b740083015f909453e0551a1e31a40855bc8e086eb8db803a625bbf880e861ef96aefa800801ca03a92b0a4ffd7f8774688325c1306387e15e64225d03a5a43aeceaf2e53ea782da033f501d040a857572b747e7a0968f269107e34dae093f901b380423937862084"

const TEST_RECEIPT_VALUE = "0xf90128a0bbc7f826deb035ff86a12507aa7c967c931e920deffcf82bb61109267d88cab482f618b9010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0"
const TEST_RECEIPT_NODES = "0xf901d8f851a0e174e998404ccb578d781d64efceb6bf63547f4aed3d801e67229f1fbd827c6480808080808080a06e2f5c4a84018daf85387f2a09955f2fb535d8d459b867aabd0235ba97d991738080808080808080f85180a07d4e8719e289768c06065586d7e5b56a73b8c81e724724476ed75c9b5b59a5caa02eb7a5cd9716b4b4824e556c2df895a60fa6a0b68bd093081d24ba93eea522488080808080808080808080808080f9012f20b9012bf90128a0bbc7f826deb035ff86a12507aa7c967c931e920deffcf82bb61109267d88cab482f618bc0"

contract('Ion.js', (accounts) => {
    it('Deploy Ion', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);
        let chainId = await ion.chainId();

        assert.equal(chainId, DEPLOYEDCHAINID);
    })

    it('Register Chain', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        // Successfully add id of another chain
        await ion.RegisterChain(TESTCHAINID);
        let chain = await ion.chains.call(0);

        assert.equal(chain, TESTCHAINID);

        // Fail adding id of this chain
        await ion.RegisterChain(DEPLOYEDCHAINID).should.be.rejected;

        // Fail adding id of chain already registered
        await ion.RegisterChain(TESTCHAINID).should.be.rejected;
    })

    it('Submit Block', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        // Submit block should succeed
        await ion.SubmitBlock(TESTCHAINID, TESTBLOCK.hash, TESTRLPENCODING)

        let blockHash = await ion.m_blockhashes(TESTCHAINID, 0);
        let header = await ion.getBlockHeader.call(blockHash);

        // Separate fetched header info
        parentHash = header[0];
        txRootHash = header[1];
        receiptRootHash = header[2];

        // Assert that block was persisted correctly
        assert.equal(blockHash, TESTBLOCK.hash);
        assert.equal(parentHash, TESTBLOCK.parentHash);
        assert.equal(txRootHash, TESTBLOCK.transactionsRoot);
        assert.equal(receiptRootHash, TESTBLOCK.receiptsRoot);
    })

    it('Fail Submit Block from unknown chain', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        await ion.SubmitBlock(TESTCHAINID.slice(0, -2) + "ff", "0xe40cd510f5e415980a2a18ab97b1983c7da43ee56b299cf931c35d9c9ce435f2", "0xf9025ea0f4d7435eff2fcff295eca2c97a1299eeb1d2ce479b4c6e0e799f4a7bed6e4f72a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a019ac400db348a4975008c6e75c537bce261d116bcd74d8b75a9d6992e3b161eda087c9f55218d8784fa39a773791633e9d007a99bef43c12233ebf980810d47464a05ad439bb61e71db83d139847424ac55990546a1b55cc5dd12a57850fd47af845bd2880d08334ef5308dff826928845b23c06eb861d88301080b846765746888676f312e31302e32856c696e757800000000000000461bc1df80fdafba4508e41ef01a570b7998fa0c64eaae65d62e57929afc232a0656a0a43e10387ffebcc8837d1c0d28ab801313e18775f574e73f119452b42e01a00000000000000000000000000000000000000000000000000000000000000000880000000000000000").should.be.rejected;
    })

    it('Fail Submit Block with wrong block hash', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        await ion.SubmitBlock(TESTCHAINID, "0xe4" + "1" + "cd510f5e415980a2a18ab97b1983c7da43ee56b299cf931c35d9c9ce435f2", "0xf9025ea0f4d7435eff2fcff295eca2c97a1299eeb1d2ce479b4c6e0e799f4a7bed6e4f72a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a019ac400db348a4975008c6e75c537bce261d116bcd74d8b75a9d6992e3b161eda087c9f55218d8784fa39a773791633e9d007a99bef43c12233ebf980810d47464a05ad439bb61e71db83d139847424ac55990546a1b55cc5dd12a57850fd47af845b90100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000281d2880d08334ef5308dff826928845b23c06eb861d88301080b846765746888676f312e31302e32856c696e757800000000000000461bc1df80fdafba4508e41ef01a570b7998fa0c64eaae65d62e57929afc232a0656a0a43e10387ffebcc8837d1c0d28ab801313e18775f574e73f119452b42e01a00000000000000000000000000000000000000000000000000000000000000000880000000000000000").should.be.rejected;
    })

    it('Check Tx Proof', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        await ion.SubmitBlock(TESTCHAINID, TESTBLOCK.hash, TESTRLPENCODING);

        await ion.CheckTxProof(TESTCHAINID, TESTBLOCK.hash, TEST_TX_VALUE, TEST_TX_NODES, TEST_PATH);
    })

    it('Fail Tx Proof', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        await ion.SubmitBlock(TESTCHAINID, TESTBLOCK.hash, TESTRLPENCODING);

        // Fail with wrong chain ID
        await ion.CheckTxProof(DEPLOYEDCHAINID, TESTBLOCK.hash, TEST_TX_VALUE, TEST_TX_NODES, TEST_PATH).should.be.rejected;

        // Fail with wrong block hash
        await ion.CheckTxProof(TESTCHAINID, TESTBLOCK.hash.substring(0, 30) + "ff", TEST_TX_VALUE, TEST_TX_NODES, TEST_PATH).should.be.rejected;

        // Fail with wrong path
        await ion.CheckTxProof(TESTCHAINID, TESTBLOCK.hash, TEST_TX_VALUE, TEST_TX_NODES, "0xff").should.be.rejected;
    })

    it('Check Receipt Proof', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        await ion.SubmitBlock(TESTCHAINID, TESTBLOCK.hash, TESTRLPENCODING);

        await ion.CheckReceiptProof(TESTCHAINID, TESTBLOCK.hash, TEST_RECEIPT_VALUE, TEST_RECEIPT_NODES, TEST_PATH);
    })

    it('Fail Receipt Proof', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        await ion.SubmitBlock(TESTCHAINID, TESTBLOCK.hash, TESTRLPENCODING);

        // Fail with wrong chain ID
        await ion.CheckReceiptProof(DEPLOYEDCHAINID, TESTBLOCK.hash, TEST_RECEIPT_VALUE, TEST_RECEIPT_NODES, TEST_PATH).should.be.rejected;

        // Fail with wrong block hash
        await ion.CheckReceiptProof(TESTCHAINID, TESTBLOCK.hash.substring(0, 30) + "ff", TEST_RECEIPT_VALUE, TEST_RECEIPT_NODES, TEST_PATH).should.be.rejected;

        // Fail with wrong path
        await ion.CheckReceiptProof(TESTCHAINID, TESTBLOCK.hash, TEST_RECEIPT_VALUE, TEST_RECEIPT_NODES, "0xff").should.be.rejected;
    })

    it('Check Roots Proof', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        await ion.SubmitBlock(TESTCHAINID, TESTBLOCK.hash, TESTRLPENCODING);

        await ion.CheckRootsProof(TESTCHAINID, TESTBLOCK.hash, TEST_TX_NODES, TEST_RECEIPT_NODES);
    })

    it('Fail Roots Proof', async () => {
        const ion = await Ion.new(DEPLOYEDCHAINID);

        await ion.RegisterChain(TESTCHAINID);

        await ion.SubmitBlock(TESTCHAINID, TESTBLOCK.hash, TESTRLPENCODING);

        // Fail with wrong chain ID
        await ion.CheckRootsProof(DEPLOYEDCHAINID, TESTBLOCK.hash, TEST_TX_NODES, TEST_RECEIPT_NODES).should.be.rejected

        // Fail with wrong block hash
        await ion.CheckRootsProof(TESTCHAINID, TESTBLOCK.hash.substring(0, 30) + "ff", TEST_TX_NODES, TEST_RECEIPT_NODES).should.be.rejected;

        // Fail with wrong tx nodes
        await ion.CheckRootsProof(TESTCHAINID, TESTBLOCK.hash.substring(0, 30) + "ff", "0xf9011FF851a0f2c8598d0469e213e269219f0f631bf9834344426238de6b986cf64e8ab7a76a80808080808080a04a397832771093a06e1fbfde782a2fc1624f214d090825c065d301f0325e0c7b8080808080808080f85180a0a6177c642f5f21f80f5e7ba81558bfb253da9fbe0bcedc768433cbff6f973073a0d56c80e3abbe59dfa6b65f3640f8f0661b485b76c44379d3c478545c59e508a48080808080808080808080808080f87520b872f8708302a122850ba43b740083015f909453e0551a1e31a40855bc8e086eb8db803a625bbf880e861ef96aefa800801ca03a92b0a4ffd7f8774688325c1306387e15e64225d03a5a43aeceaf2e53ea782da033f501d040a857572b747e7a0968f269107e34dae093f901b380423937862084", TEST_RECEIPT_NODES).should.be.rejected;

        // Fail with wrong receipt nodes
        await ion.CheckRootsProof(TESTCHAINID, TESTBLOCK.hash.substring(0, 30) + "ff", TEST_TX_NODES, "0xf90FF8f851a0e174e998404ccb578d781d64efceb6bf63547f4aed3d801e67229f1fbd827c6480808080808080a06e2f5c4a84018daf85387f2a09955f2fb535d8d459b867aabd0235ba97d991738080808080808080f85180a07d4e8719e289768c06065586d7e5b56a73b8c81e724724476ed75c9b5b59a5caa02eb7a5cd9716b4b4824e556c2df895a60fa6a0b68bd093081d24ba93eea522488080808080808080808080808080f9012f20b9012bf90128a0bbc7f826deb035ff86a12507aa7c967c931e920deffcf82bb61109267d88cab482f618bc0").should.be.rejected;
    })
})
